import java.util.Arrays;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("WELCOME TO CS300 PEG SOLITAIRE!");
		System.out.println("===============================");
		System.out.println("");
		System.out.println("Board Style Menu");
		System.out.println("  1) Cross");
		System.out.println("  2) Circle");
		System.out.println("  3) Triangle");
		System.out.println("  4) Simple T");
		Scanner input = new Scanner(System.in);
		int choice = readValidInt(input, "Choose a board style: ", 1, 4);
		System.out.println("");
		char[][] table = creatBoard(choice);
		displayBoard(table);
		while (true) {
			int[] movement = readValidMove(input, table);
			if (isValidMove(table, movement[0], movement[1], movement[2]) == false) {
				String move;
				if (movement[2] == 1) {
					move = "UP";
				} else if (movement[2] == 2) {
					move = "DOWN";
				} else if (movement[2] == 3) {
					move = "LEFT";
				} else {
					move = "RIGHT";
				}
				System.out.println("Moving a peg from row " + movement[0] + " and column " + movement[1] + " " + move
						+ " is not currently a legal move.");
				System.out.println("");
				continue;
			} else {
				System.out.println("");
				performMove(table, movement[0], movement[1], movement[2]);
				displayBoard(table);
				if (countMovesAvailable(table) == 0) {
					if (countPegsRemaining(table) == 1) {
						System.out.println("Congrats, you won!");
						System.out.println("");
						break;
					} else {
						System.out.println("It looks like there are no more legal moves.  Please try again.");
						System.out.println("");
						break;
					}
				}
			}

		}
		System.out.println("==========================================");
		System.out.println("THANK YOU FOR PLAYING CS300 PEG SOLITAIRE!");

	}

	static int readValidInt(Scanner in, String prompt, int min, int max) {
		System.out.print(prompt);
		String enter = in.nextLine().trim();

		while (true) {
			if (!enter.matches("\\d+")) {
				System.out.print("Please enter your choice as an integer between " + min + " and " + max + ": ");
				enter = in.nextLine().trim();
				continue;
			}

			else {
				Integer number = Integer.valueOf(enter);
				if (number < min || number > max) {
					System.out.print("Please enter your choice as an integer between " + min + " and " + max + ": ");
					enter = in.nextLine().trim();
					continue;
				} else {
					return number;
				}
			}
		}

	}

	static char[][] creatBoard(int boardType) {
		if (boardType == 1) {
			char[][] cross = new char[7][9];
			for (int i = 0; i < 7; i++) {
				for (int j = 0; j < 9; j++) {
					if (i == 0 || i == 1 || i == 5 || i == 6) {
						if (j == 3 || j == 4 || j == 5) {
							cross[i][j] = '@';
						} else {
							cross[i][j] = '#';
						}
					} else if (i == 2 || i == 4) {
						cross[i][j] = '@';
					} else {
						if (j == 4) {
							cross[i][j] = '-';
						} else {
							cross[i][j] = '@';
						}
					}
				}
			}
			return cross;
		}

		if (boardType == 2) {
			char[][] circle = new char[6][6];
			for (int i = 0; i < 6; i++) {
				for (int j = 0; j < 6; j++) {
					if (i == 0 || i == 5) {
						if (j == 0 || j == 5) {
							circle[i][j] = '#';
						} else if (j == 1 || j == 4) {
							circle[i][j] = '-';
						} else {
							circle[i][j] = '@';
						}
					} else if (i == 1 || i == 4) {
						if (j == 0 || j == 5) {
							circle[i][j] = '-';
						} else {
							circle[i][j] = '@';
						}
					} else {
						circle[i][j] = '@';
					}
				}
			}
			return circle;
		}

		if (boardType == 3) {
			char[][] triangle = new char[4][9];
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 9; j++) {
					if (i == 2 && j == 4) {
						triangle[i][j] = '-';
					} else if (4 - i <= j && j <= 4 + i) {
						triangle[i][j] = '@';
					} else {
						if (j < 3 - i || j > 4 + i + 1) {
							triangle[i][j] = '#';
						} else {
							triangle[i][j] = '-';
						}
					}
				}
			}
			return triangle;

		}

		if (boardType == 4) {
			char[][] simpleT = new char[5][5];
			for (int i = 0; i < 5; i++) {
				for (int j = 0; j < 5; j++) {
					if (i == 0 || i == 4) {
						simpleT[i][j] = '-';
					} else if (i == 2 || i == 3) {
						if (j == 2) {
							simpleT[i][j] = '@';
						} else {
							simpleT[i][j] = '-';
						}
					} else {
						if (j == 0 || j == 4) {
							simpleT[i][j] = '-';
						} else {
							simpleT[i][j] = '@';
						}
					}
				}
			}
			return simpleT;
		}

		else {
			System.out.println("Invalid input");
		}
		return null;
	}

	static void displayBoard(char[][] board) {
		int row_length = board.length;
		int column_length = board[1].length;
		for (int i = 0; i <= column_length; i++) {
			if (i == 0) {
				System.out.print("  ");
			} else {
				System.out.print(i);
			}
		}
		System.out.println("");

		for (int i = 0; i < row_length; i++) {
			for (int j = 0; j < column_length; j++) {
				if (j == 0) {
					System.out.print((i + 1) + " " + board[i][j]);
				} else {
					System.out.print(board[i][j]);
				}
			}
			System.out.println("");
		}
	}

	static int[] readValidMove(Scanner in, char[][] board) {// has changed to(row,column,direction)
		int move[] = new int[3];
		int column_valid = board[0].length;
		System.out.print("Choose the COLUMN of a peg you'd like to move: ");
		String input_column = in.nextLine().trim();

		while (true) {
			if (!input_column.matches("\\d+")) {
				System.out.print("Please enter your choice as an integer between " + 1 + " and " + column_valid + ": ");
				input_column = in.nextLine().trim();
				continue;
			} else {
				Integer inputColumn = Integer.valueOf(input_column);
				if (inputColumn < 1 || inputColumn > column_valid) {
					System.out.print(
							"Please enter your choice as an integer between " + 1 + " and " + column_valid + ": ");
					input_column = in.nextLine().trim();
					continue;
				} else {
					move[1] = inputColumn;
					break;
				}
			}
		}

		int row_valid = board.length;
		System.out.print("Choose the ROW of a peg you'd like to move: ");
		String input_row = in.nextLine().trim();
		while (true) {
			if (!input_row.matches("\\d+")) {
				System.out.print("Please enter your choice as an integer between " + 1 + " and " + row_valid + ": ");
				input_row = in.nextLine().trim();
				continue;
			} else {
				Integer inputRow = Integer.valueOf(input_row);
				if (inputRow < 1 || inputRow > row_valid) {
					System.out
							.print("Please enter your choice as an integer between " + 1 + " and " + row_valid + ": ");
					input_row = in.nextLine().trim();
					continue;
				} else {
					move[0] = inputRow;
					break;
				}
			}
		}

		System.out.print("Choose a DIRECTION to move that peg 1) UP, 2) DOWN, 3) LEFT, or 4) RIGHT: ");
		String input_direction = in.nextLine().trim();
		while (true) {
			if (!input_direction.matches("\\d+")) {
				System.out.print("Please enter your choice as an integer between 1 and 4: ");
				input_direction = in.nextLine().trim();
				continue;
			}

			else {
				Integer inputDirection = Integer.valueOf(input_direction);
				if (inputDirection >= 1 && inputDirection <= 4) {
					move[2] = inputDirection;
					break;
				} else {
					System.out.print("Please enter your choice as an integer between 1 and 4: ");
					input_direction = in.nextLine().trim();
					continue;
				}
			}
		}
		return move;
	}

	static boolean isValidMove(char[][] board, int row, int column, int direction) {
		int moveRow = row - 1;
		int moveColumn = column - 1;

		if (board[moveRow][moveColumn] == '@') {
			if (direction == 1) {
				if (moveRow - 1 < 0 || moveRow - 2 < 0) {
					return false;
				}

				else {
					if (board[moveRow - 1][moveColumn] == '@' && board[moveRow - 2][moveColumn] == '-') {
						return true;
					} else {
						return false;
					}
				}
			}

			else if (direction == 2) {
				if (moveRow + 1 >= board.length || moveRow + 2 >= board.length) {
					return false;
				} else {
					if (board[moveRow + 1][moveColumn] == '@' && board[moveRow + 2][moveColumn] == '-') {
						return true;
					} else {
						return false;
					}
				}
			}

			else if (direction == 3) {
				if (moveColumn - 1 < 0 || moveColumn - 2 < 0) {
					return false;
				} else {
					if (board[moveRow][moveColumn - 1] == '@' && board[moveRow][moveColumn - 2] == '-') {
						return true;
					} else {
						return false;
					}
				}
			}

			else if (direction == 4) {
				if (moveColumn + 1 >= board[0].length || moveColumn + 2 >= board[0].length) {
					return false;
				} else {
					if (board[moveRow][moveColumn + 1] == '@' && board[moveRow][moveColumn + 2] == '-') {
						return true;
					} else {
						return false;
					}
				}
			}
		}
		return false;
	}

	static char[][] performMove(char[][] board, int row, int column, int direction) {
		int rowMove = row - 1;
		int columnMove = column - 1;
		if (direction == 1) {
			board[rowMove][columnMove] = '-';
			board[rowMove - 1][columnMove] = '-';
			board[rowMove - 2][columnMove] = '@';
		} else if (direction == 2) {
			board[rowMove][columnMove] = '-';
			board[rowMove + 1][columnMove] = '-';
			board[rowMove + 2][columnMove] = '@';
		} else if (direction == 3) {
			board[rowMove][columnMove] = '-';
			board[rowMove][columnMove - 1] = '-';
			board[rowMove][columnMove - 2] = '@';
		} else {
			board[rowMove][columnMove] = '-';
			board[rowMove][columnMove + 1] = '-';
			board[rowMove][columnMove + 2] = '@';
		}
		return board;
	}

	static int countPegsRemaining(char[][] board) {
		int count = 0;
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				if (board[i][j] == '@') {
					count++;
				}
			}
		}
		return count;
	}

	static int countMovesAvailable(char[][] board) {
		int n = 0;
		for (int i = 1; i <= board.length; i++) {
			for (int j = 1; j <= board[0].length; j++) {
				if (isValidMove(board, i, j, 1) == true) {
					n++;
				}
				if (isValidMove(board, i, j, 2) == true) {
					n++;
				}
				if (isValidMove(board, i, j, 3) == true) {
					n++;
				}
				if (isValidMove(board, i, j, 4) == true) {
					n++;
				}
			}
		}
		return n;
	}

}
